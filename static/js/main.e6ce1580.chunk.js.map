{"version":3,"sources":["App.module.css","redux/searchReducer.ts","common/preloader.gif","api/api.ts","api/getBookApi.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","CHANGE_SEARCH_QUERY","RENEW_SEARCH_RESULTS","CHANGE_IS_LOADING_STATUS","initialData","pageSize","books","isLoading","totalCount","queryString","serverApi","axios","create","baseURL","defaults","params","booksAPI","title","get","then","response","data","App","className","styles","app","Hat","Books","React","memo","useState","searchName","setSearchName","dispatch","useDispatch","changeSearchString","s","type","payload","hat","value","onChange","e","currentTarget","onKeyPress","code","console","log","state","useSelector","searchResults","useEffect","items","totalItems","Fragment","booksWrapper","booksContainer","map","book","index","Book","volumeInfo","category","categories","imageUrl","imageLinks","smallThumbnail","authors","src","preloader","alt","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6ce1580.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1YSN_\",\"hat\":\"App_hat__216gS\",\"booksWrapper\":\"App_booksWrapper__1ezzE\",\"booksContainer\":\"App_booksContainer__LZ7oM\",\"book\":\"App_book__1LxLc\"};","//constants\r\nconst CHANGE_SEARCH_QUERY = 'CHANGE_SEARCH_QUERY'\r\nconst RENEW_SEARCH_RESULTS = 'RENEW_SEARCH_RESULTS'\r\nconst CHANGE_IS_LOADING_STATUS = 'CHANGE_IS_LOADING_STATUS'\r\n\r\n//types\r\ntype bookType = {\r\n    kind: string,\r\n    id: string,\r\n    etag: string,\r\n    selfLink: string,\r\n    volumeInfo: {\r\n        title: string,\r\n        subtitle: string,\r\n        authors: string[],\r\n        publishedDate: string,\r\n        description: string,\r\n        industryIdentifiers: [\r\n            {\r\n                type: string,\r\n                identifier: string\r\n            }\r\n        ],\r\n        readingModes: {\r\n            text: boolean,\r\n            image: boolean\r\n        },\r\n        pageCount: number,\r\n        printType: string,\r\n        categories: string[],\r\n        maturityRating: string,\r\n        allowAnonLogging: boolean,\r\n        contentVersion: string,\r\n        panelizationSummary: {\r\n            containsEpubBubbles: boolean,\r\n            containsImageBubbles: boolean\r\n        },\r\n        imageLinks: {\r\n            smallThumbnail: string,\r\n            thumbnail: string,\r\n        },\r\n        language: string,\r\n        previewLink: string,\r\n        infoLink: string,\r\n        canonicalVolumeLink: string,\r\n    },\r\n    saleInfo: {\r\n        country: string,\r\n        saleability: string,\r\n        isEbook: false\r\n    },\r\n    accessInfo: {\r\n        country: string,\r\n        viewability: string,\r\n        embeddable: boolean,\r\n        publicDomain: boolean,\r\n        textToSpeechPermission: string,\r\n        epub: {\r\n            isAvailable: boolean\r\n        },\r\n        pdf: {\r\n            isAvailable: boolean\r\n        },\r\n        webReaderLink: string,\r\n        accessViewStatus: string,\r\n        quoteSharingAllowed: boolean,\r\n    },\r\n    searchInfo: {\r\n        textSnippet: string,\r\n    },\r\n}\r\nexport type bookSearchType = {\r\n    kind: string,\r\n    totalItems: number,\r\n    items: bookType[],\r\n}\r\nexport type booksPageType = {\r\n    pageSize: number,\r\n    totalCount: number,\r\n    books: bookType[],\r\n    isLoading: boolean,\r\n    queryString: string,\r\n}\r\ntype actionsType = changeSearchQueryActionType\r\n    | renewSearchResultsActionType\r\n    | changeIsLoadingStatusActionType\r\n\r\ntype changeSearchQueryActionType = ReturnType<typeof changeSearchQuery>\r\ntype renewSearchResultsActionType = ReturnType<typeof renewSearchResults>\r\ntype changeIsLoadingStatusActionType = ReturnType<typeof changeIsLoadingStatus>\r\n\r\n//action creators\r\nexport const changeIsLoadingStatus = (isLoading: boolean) => {\r\n    return {\r\n        type: CHANGE_IS_LOADING_STATUS,\r\n        payload: {\r\n            isLoading,\r\n        }\r\n    } as const\r\n\r\n}\r\nexport const renewSearchResults = (books: bookType[], totalCount: number) => {\r\n    return {\r\n        type: RENEW_SEARCH_RESULTS,\r\n        payload: {\r\n            books,\r\n            totalCount,\r\n            isLoading: false,\r\n        },\r\n    } as const\r\n}\r\nexport const changeSearchQuery = (queryString: string) => {\r\n    return {\r\n        type: CHANGE_SEARCH_QUERY,\r\n        payload: {\r\n            queryString,\r\n        }\r\n    } as const\r\n}\r\n\r\n//data\r\nconst initialData: booksPageType = {\r\n    pageSize: 2,\r\n    books: [],\r\n    isLoading: false,\r\n    totalCount: 0,\r\n    queryString: '',\r\n}\r\n\r\nexport const searchReducer = (state: booksPageType = initialData, action: actionsType) => {\r\n    console.log(action.payload)\r\n    switch (action.type) {\r\n        case RENEW_SEARCH_RESULTS:\r\n        case CHANGE_IS_LOADING_STATUS:\r\n        case CHANGE_SEARCH_QUERY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/preloader.53b421a8.gif\";","import axios from \"axios\";\r\nexport const serverApi = axios.create({\r\n    baseURL: 'https://www.googleapis.com/books/v1/volumes',\r\n})\r\nserverApi.defaults.params = {}\r\nserverApi.defaults.params['key'] = 'AIzaSyCI0tPq7SoEIfpnkJRjqbu_YIDUeMVvZHU'\r\n\r\n\r\n\r\nconst configOMB = {\r\n    baseURL: 'https://www.googleapis.com/books/v1/volumes',\r\n};\r\nconst key = 'AIzaSyCI0tPq7SoEIfpnkJRjqbu_YIDUeMVvZHU';\r\n\r\n\r\nconst API = {\r\n    searchBooksByTitle: (title: string) => {\r\n        return fetch(`${configOMB.baseURL}/?key=${key}&q=${title}`)\r\n            .then(data => data.json())\r\n    },\r\n};\r\n\r\nexport default API;\r\n\r\n","import {serverApi} from \"./api\";\r\nimport {bookSearchType} from \"../redux/searchReducer\";\r\n\r\nexport const booksAPI = {\r\n    getBooks(title: string, pageSize: number) {\r\n        return serverApi\r\n            .get<bookSearchType>(`?q=${title}&maxResults=${pageSize}`)\r\n            .then(response => response.data)\r\n            // need to catch errors\r\n    }\r\n}","import React, {KeyboardEvent, ChangeEvent, useState, useEffect} from 'react';\nimport styles from './App.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeSearchQuery, renewSearchResults, booksPageType, changeIsLoadingStatus} from \"./redux/searchReducer\";\nimport {stateType} from \"./redux/store\";\nimport preloader from './common/preloader.gif'\nimport API from \"./api/api\";\nimport {booksAPI} from \"./api/getBookApi\";\n\nfunction App() {\n    return (\n        <div className={styles.app}>\n            <Hat/>\n            <Books/>\n        </div>\n    );\n}\n\nexport default App;\n\nexport const Hat = React.memo(() => {\n    const [searchName, setSearchName] = useState('')\n    const dispatch = useDispatch()\n\n    const onSearchFieldChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchName(e.currentTarget.value)\n    }\n    const changeSearchString = (s: string) => {\n        dispatch(changeSearchQuery(s))\n    }\n    const onEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        const key = e.code\n        if (key === 'Enter') {\n            changeSearchString(searchName)\n        }\n    }\n    return (\n        <div className={styles.hat}>\n            <h1>Search for books</h1>\n            <div>\n                <input value={searchName}\n                       onChange={onSearchFieldChange} onKeyPress={onEnterPress}/>\n                <div>\n                    <select value={'first'}>\n                        <option value={'first'}>first</option>\n                        <option value={'second'}>second</option>\n                    </select>\n                    <select value={'first'}>\n                        <option value={'first'}>first</option>\n                        <option value={'second'}>second</option>\n                    </select>\n                </div>\n            </div>\n\n        </div>\n    )\n})\nexport const Books = React.memo(() => {\n    console.log('from Books')\n    //data\n    const state = useSelector<stateType, booksPageType>(state => state.searchResults)\n    const dispatch = useDispatch()\n    console.log(state)\n    //useEffect\n    useEffect(() => {\n        if (state.queryString) {\n            dispatch(changeIsLoadingStatus(true))\n            booksAPI.getBooks(state.queryString, state.pageSize)\n                .then(data => {\n                    dispatch(renewSearchResults(data.items, data.totalItems))\n                })\n        }\n    }, [state.queryString])\n    return (\n        <React.Fragment>\n            {\n                state.totalCount > 0 &&\n                    <React.Fragment>\n                        <div className={styles.booksWrapper}>\n                            <div>{state.totalCount}</div>\n                            <div className={styles.booksContainer}>\n                                {\n                                    state.books.map((book, index) => {\n                                        return (\n                                            <Book key={index}\n                                                  title={book.volumeInfo.title}\n                                                  category={book.volumeInfo.categories[0]}\n                                                  imageUrl={book.volumeInfo.imageLinks.smallThumbnail}\n                                                  authors={book.volumeInfo.authors}/>\n                                        )\n                                    })\n                                }\n                            </div>\n                            {\n                                !state.isLoading && <div>Load more</div>\n                            }\n                        </div>\n                    </React.Fragment>\n            }\n            {\n                state.isLoading &&\n                <div>\n                    <img src={preloader} alt={'preloader'}/>\n                </div>\n            }\n        </React.Fragment>\n    )\n})\n\ntype BookPropsType = {\n    title: string,\n    imageUrl: string,\n    authors: string[],\n    category: string\n}\nexport const Book: React.FC<BookPropsType> = React.memo((props) => {\n    return (\n        <div className={styles.book}>\n            <img src={props.imageUrl} alt={'bookPic'}/>\n            <h3>{props.title}</h3>\n            <div>\n                <span className={styles.authors}>{props.authors}</span>\n            </div>\n            <div>\n                <span className={styles.category}>{props.category}</span>\n            </div>\n        </div>\n    )\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from \"redux\";\r\nimport {searchReducer} from \"./searchReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    searchResults: searchReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n//types\r\nexport type stateType = ReturnType<typeof store.getState>\r\nexport type dispatchType = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}